version: '3.8'
services:
#  api-gateway:
#    build:
#      context: ./api-gateway
#      dockerfile: Dockerfile
#    container_name: api-gateway
#    ports:
#      - '3000:3000'
#    volumes:
#      - ./api-gateway/src:/app/src
#    restart: always
#    networks:
#      - api-gateway-network
#    depends_on:
#      - api-gateway-db
#
#  api-gateway-db:
#    image: postgres:latest
#    container_name: api-gateway-postgres
#    env_file: ./api-gateway/api-gateway-config/api-gateway.env
#    ports:
#      - '5432:5432'
#    volumes:
#      - /${HOME}/data/postgres:/var/lib/postgresql/data
#    restart: always
#    networks:
#      - api-gateway-network
#
#  api-gateway-pgadmin:
#    container_name: api-gateway-pgadmin4
#    image: dpage/pgadmin4
#    env_file: ./api-gateway/api-gateway-config/api-gateway.env
#    ports:
#      - '8080:80'
#    restart: always
#    depends_on:
#      - api-gateway-db

  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: web
    ports:
      - '3001:3000'
    volumes:
      - ./web/src:/app/src
    restart: always
    networks:
      - web-network
    depends_on:
      - web-db

  web-db:
    image: postgres:latest
    container_name: web-postgres
    env_file: ./web/web-config/web.env
    ports:
      - '5433:5432'
    volumes:
      - /${HOME}/data/postgres:/var/lib/postgresql/data
    restart: always
    networks:
      - web-network

#  web-pgadmin:
#    container_name: web-pgadmin4
#    image: dpage/pgadmin4
#    env_file: ./web/web-config/web.env
#    ports:
#      - '8081:80'
#    restart: always
#    depends_on:
#      - web-db

networks:
#  api-gateway-network:
#    driver: bridge
  web-network:
    driver: bridge